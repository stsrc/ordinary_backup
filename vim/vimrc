" - VUNDLE

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'majutsushi/tagbar'
Plugin 'vim-airline/vim-airline'
Plugin 'udalov/kotlin-vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" - CSCOPE
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  function! LoadCscope()
    let db = findfile("cscope.out", ".;")
    if (!empty(db))
      let path = strpart(db, 0, match(db, "/cscope.out$"))
      set nocscopeverbose " suppress 'duplicate connection' error
      exe "cs add " . db . " " . path
      set cscopeverbose
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
    endif
  endfunction
  au BufEnter /* call LoadCscope()

  """"""""""""" Someone else cscope/vim key mappings
  "
  " The following maps all invoke one of the following cscope search types:
  "
  "   's'   symbol: find all references to the token under cursor
  "   'g'   global: find global definition(s) of the token under cursor
  "   'c'   calls:  find all calls to the function name under cursor
  "   't'   text:   find all instances of the text under cursor
  "   'e'   egrep:  egrep search for the word under cursor
  "   'f'   file:   open the filename under cursor
  "   'i'   includes: find files that include the filename under cursor
  "   'd'   called: find functions that function under cursor calls
  "   'n'   go to the next search result.
  "   'previous' go to the previous search result.
  "
  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

  nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

  nmap <C-n> :cn<CR><CR>
  nmap <C-p> :cprevious<CR><CR>
endif

" - vim
 syntax on
" syntax off
colorscheme industry
"colorscheme desert
set tabstop=8
set softtabstop=8
set shiftwidth=8
set noexpandtab
set noeol
set backspace=indent,eol,start
set ruler
set ff=unix

autocmd FileType c,cpp,java,php,py,rs,rust autocmd BufWritePre <buffer> %s/\s\+$//e
" from vertical to horizontal split
map vh :windo wincmd K<CR>
" from horizontal to vertical split
map hv :windo wincmd H<CR>

map <F3> :vert term<CR>
" - airline settings
let g:airline#extensions#tagbar#enabled = 1
